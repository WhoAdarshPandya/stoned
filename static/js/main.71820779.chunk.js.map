{"version":3,"sources":["../../src/components/Button/Button.tsx","App.tsx","index.tsx"],"names":["Button","children","color","size","onClick","textColor","disableRipple","endIcon","href","raised","startIcon","variant","useState","x","y","coords","setCoords","isRippling","setIsRippling","useEffect","setTimeout","className","rect","e","top","style","left","target","rel","React","App","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71820779.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { ButtonProps } from '../propTypes/componentPropTypes'\r\nimport './style.css'\r\n\r\nexport const Button = ({\r\n  children,\r\n  color = 'primary',\r\n  size = 'medium',\r\n  onClick,\r\n  textColor = 'textColorWhite',\r\n  disableRipple = false,\r\n  endIcon = '',\r\n  href = '',\r\n  raised = false,\r\n  startIcon = '',\r\n  variant = 'contained'\r\n}: ButtonProps): JSX.Element => {\r\n  const [coords, setCoords] = useState({ x: -1, y: -1 })\r\n  const [isRippling, setIsRippling] = useState(false)\r\n  useEffect(() => {\r\n    if (coords.x !== -1 && coords.y !== -1) {\r\n      setIsRippling(true)\r\n      setTimeout(() => setIsRippling(false), 300)\r\n    } else setIsRippling(false)\r\n  }, [coords])\r\n\r\n  useEffect(() => {\r\n    if (!isRippling) setCoords({ x: -1, y: -1 })\r\n  }, [isRippling])\r\n  return (\r\n    <button\r\n      className={`ripple-button ${color} ${textColor} ${\r\n        raised && 'raised'\r\n      } ${size} ${variant === 'outlined' && `${color}Outlined`}`}\r\n      onClick={(e: any): void => {\r\n        const rect = e.target.getBoundingClientRect()\r\n        !disableRipple &&\r\n          setCoords({ x: e.clientX - rect.left, y: e.clientY - rect.top })\r\n        onClick && onClick(e)\r\n      }}\r\n    >\r\n      {isRippling ? (\r\n        <span\r\n          className={`ripple ${textColor + 'Ripple'}`}\r\n          style={{\r\n            left: coords.x,\r\n            top: coords.y\r\n          }}\r\n        />\r\n      ) : (\r\n        ''\r\n      )}\r\n      <span className='content'>\r\n        {href ? (\r\n          <a\r\n            href={href}\r\n            target={!href.startsWith('#') ? '_blank' : ''}\r\n            rel='noreferrer'\r\n          >\r\n            {children}\r\n          </a>\r\n        ) : (\r\n          <React.Fragment>\r\n            {!startIcon && !endIcon && children}\r\n            {startIcon && !endIcon && (\r\n              <div className='dan-text'>\r\n                <i className='material-icons'>{startIcon}</i>\r\n                <span className='btn-text'>{children}</span>\r\n              </div>\r\n            )}\r\n            {endIcon && !startIcon && (\r\n              <div className='dan-text'>\r\n                <span className='btn-text'>{children}</span>\r\n                <i className='material-icons'>{endIcon}</i>\r\n              </div>\r\n            )}\r\n            {startIcon && endIcon && (\r\n              <div className='dan-text'>\r\n                <i className='material-icons'>{startIcon}</i>\r\n                <span className='btn-text'>{children}</span>\r\n                <i className='material-icons'>{endIcon}</i>\r\n              </div>\r\n            )}\r\n          </React.Fragment>\r\n        )}\r\n      </span>\r\n    </button>\r\n  )\r\n}\r\n","import React from 'react'\n\nimport { Button } from 'stoned'\n\nconst App = () => {\n  return (\n    <>\n      <Button\n        color='primary'\n        onClick={(e) => {\n          console.log(e)\n        }}\n      >\n        primary\n      </Button>\n      <Button\n        color='secondary'\n        onClick={(e) => {\n          console.log(e)\n        }}\n      >\n        secondary\n      </Button>\n      <Button\n        color='inherit'\n        textColor='textColorPrimary'\n        // disableRipple={true}\n        onClick={(e) => {\n          console.log(e)\n        }}\n      >\n        transparent\n      </Button>\n      <Button\n        color='inherit'\n        textColor='textColorPrimary'\n        disableRipple={true}\n        onClick={(e) => {\n          console.log(e)\n        }}\n      >\n        no ripple\n      </Button>\n      <br />\n      <Button\n        onClick={(e) => {\n          console.log(e)\n        }}\n        raised={true}\n      >\n        primary raised\n      </Button>\n      <Button\n        raised={true}\n        color='secondary'\n        onClick={(e) => {\n          console.log(e)\n        }}\n      >\n        secondary raised\n      </Button>\n      <Button\n        raised={true}\n        color='inherit'\n        textColor='textColorSecondary'\n        onClick={(e) => {\n          console.log(e)\n        }}\n      >\n        transparent\n      </Button>\n      <Button\n        raised={true}\n        color='inherit'\n        textColor='textColorSecondary'\n        disableRipple={true}\n        onClick={(e) => {\n          console.log(e)\n        }}\n      >\n        no ripple raised\n      </Button>\n      <br />\n      <Button\n        color='primary'\n        onClick={(e) => {\n          console.log(e)\n        }}\n        size='small'\n      >\n        small\n      </Button>\n      <Button\n        color='primary'\n        onClick={(e) => {\n          console.log(e)\n        }}\n        size='medium'\n      >\n        medium\n      </Button>\n      <Button\n        color='primary'\n        onClick={(e) => {\n          console.log(e)\n        }}\n        size='large'\n      >\n        large\n      </Button>\n      <Button\n        color='primary'\n        href='https://google.com'\n        onClick={(e) => {\n          console.log(e)\n        }}\n        size='large'\n      >\n        Link\n      </Button>\n      <br />\n      <Button variant='outlined'>primary outlined</Button>\n      <Button variant='outlined' raised={true}>\n        primary outlined raised\n      </Button>\n      <Button color='secondary' variant='outlined'>\n        secondary outlined\n      </Button>\n      <Button color='secondary' variant='outlined' raised={true}>\n        secondary outlined raised\n      </Button>\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'stoned/dist/index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}